# Generated by Django 5.1.5 on 2025-08-19 02:50

from django.db import migrations


def migrate_fornecedor_data(apps, schema_editor):
    """
    Migra os dados de fornecedores de texto para objetos Fornecedor
    """
    DespesaEvento = apps.get_model('app_eventos', 'DespesaEvento')
    Fornecedor = apps.get_model('app_eventos', 'Fornecedor')
    
    # Primeiro, vamos criar fornecedores baseados nos dados existentes
    fornecedores_existentes = {}
    
    # Obter todas as despesas que têm fornecedor como texto
    despesas = DespesaEvento.objects.all()
    
    for despesa in despesas:
        # Verificar se o fornecedor é uma string (dados antigos)
        if hasattr(despesa, 'fornecedor') and despesa.fornecedor and isinstance(despesa.fornecedor, str):
            nome_fornecedor = despesa.fornecedor.strip()
            
            if nome_fornecedor and nome_fornecedor not in fornecedores_existentes:
                # Criar novo fornecedor
                fornecedor, created = Fornecedor.objects.get_or_create(
                    nome_fantasia=nome_fornecedor,
                    defaults={
                        'razao_social': nome_fornecedor,
                        'cnpj': f'00.000.000/0001-{len(fornecedores_existentes) + 1:02d}',
                        'tipo_fornecedor': 'outros',
                        'telefone': '(00) 00000-0000',
                        'email': f'{nome_fornecedor.lower().replace(" ", "_")}@exemplo.com',
                        'ativo': True
                    }
                )
                fornecedores_existentes[nome_fornecedor] = fornecedor


def reverse_migrate_fornecedor_data(apps, schema_editor):
    """
    Reverte a migração (não faz nada neste caso)
    """
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('app_eventos', '0004_fornecedor_alter_despesaevento_fornecedor'),
    ]

    operations = [
        migrations.RunPython(migrate_fornecedor_data, reverse_migrate_fornecedor_data),
    ]
