# Generated by Django 5.2.2 on 2025-10-22 03:17

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


def preencher_evento_vagas(apps, schema_editor):
    """
    Preenche o campo evento das vagas existentes baseado no setor.evento
    """
    Vaga = apps.get_model('app_eventos', 'Vaga')
    
    vagas_atualizadas = 0
    for vaga in Vaga.objects.select_related('setor__evento').all():
        if vaga.setor and vaga.setor.evento:
            vaga.evento = vaga.setor.evento
            vaga.save(update_fields=['evento'])
            vagas_atualizadas += 1
    
    print(f"✓ {vagas_atualizadas} vagas atualizadas com campo evento")


def reverter_evento_vagas(apps, schema_editor):
    """
    Função reversa (não faz nada pois o campo será removido)
    """
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('app_eventos', '0024_freelance_device_token_freelance_notificacoes_ativas'),
    ]

    operations = [
        # 1. Adicionar campo evento (nullable)
        migrations.AddField(
            model_name='vaga',
            name='evento',
            field=models.ForeignKey(blank=True, help_text='Evento ao qual a vaga pertence', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='vagas_diretas', to='app_eventos.evento', verbose_name='Evento'),
        ),
        
        # 2. Preencher evento baseado em setor.evento
        migrations.RunPython(preencher_evento_vagas, reverter_evento_vagas),
        
        # 3. Tornar setor opcional
        migrations.AlterField(
            model_name='vaga',
            name='setor',
            field=models.ForeignKey(blank=True, help_text='Setor específico (deixe vazio para vaga genérica do evento)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='vagas', to='app_eventos.setorevento', verbose_name='Setor (Opcional)'),
        ),
        migrations.CreateModel(
            name='BroadcastLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('campaign_name', models.CharField(max_length=200, verbose_name='Nome da Campanha')),
                ('body_template', models.TextField(verbose_name='Corpo da Mensagem')),
                ('channel_preferred', models.CharField(choices=[('whatsapp', 'WhatsApp'), ('sms', 'SMS'), ('both', 'Ambos (com fallback)')], default='whatsapp', max_length=20, verbose_name='Canal Preferencial')),
                ('total_targets', models.PositiveIntegerField(default=0, verbose_name='Total de Destinatários')),
                ('sent', models.PositiveIntegerField(default=0, verbose_name='Enviados')),
                ('delivered', models.PositiveIntegerField(default=0, verbose_name='Entregues')),
                ('failed', models.PositiveIntegerField(default=0, verbose_name='Falhados')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('meta', models.JSONField(blank=True, default=dict, verbose_name='Metadados')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='broadcasts_created', to=settings.AUTH_USER_MODEL, verbose_name='Criado Por')),
                ('empresa_contratante', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='broadcast_logs', to='app_eventos.empresacontratante', verbose_name='Empresa Contratante')),
                ('evento', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='broadcasts', to='app_eventos.evento', verbose_name='Evento Relacionado')),
            ],
            options={
                'verbose_name': 'Log de Broadcast',
                'verbose_name_plural': 'Logs de Broadcast',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserContact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('channel_type', models.CharField(choices=[('whatsapp', 'WhatsApp'), ('sms', 'SMS')], default='whatsapp', max_length=20, verbose_name='Tipo de Canal')),
                ('address', models.CharField(help_text='Exemplo: +5511999999999', max_length=20, verbose_name='Número (Formato E.164)')),
                ('consent', models.BooleanField(default=False, verbose_name='Consentimento para Receber Mensagens')),
                ('consent_timestamp', models.DateTimeField(blank=True, null=True, verbose_name='Data do Consentimento')),
                ('is_verified', models.BooleanField(default=False, verbose_name='Número Verificado')),
                ('last_verified_at', models.DateTimeField(blank=True, null=True, verbose_name='Última Verificação')),
                ('ativo', models.BooleanField(default=True, verbose_name='Ativo')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('empresa_contratante', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_contacts', to='app_eventos.empresacontratante', verbose_name='Empresa Contratante')),
                ('freelancer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='contacts_twilio', to='app_eventos.freelance', verbose_name='Freelancer')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='contacts', to=settings.AUTH_USER_MODEL, verbose_name='Usuário')),
            ],
            options={
                'verbose_name': 'Contato de Usuário',
                'verbose_name_plural': 'Contatos de Usuários',
                'ordering': ['-created_at'],
                'unique_together': {('empresa_contratante', 'address', 'channel_type')},
            },
        ),
        migrations.CreateModel(
            name='BroadcastMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('to_address', models.CharField(max_length=20, verbose_name='Número Destinatário')),
                ('channel_used', models.CharField(choices=[('whatsapp', 'WhatsApp'), ('sms', 'SMS')], max_length=20, verbose_name='Canal Utilizado')),
                ('status', models.CharField(choices=[('queued', 'Na Fila'), ('sent', 'Enviado'), ('delivered', 'Entregue'), ('read', 'Lido'), ('failed', 'Falhou'), ('undelivered', 'Não Entregue')], default='queued', max_length=20, verbose_name='Status')),
                ('message_sid', models.CharField(max_length=100, unique=True, verbose_name='Twilio Message SID')),
                ('error_code', models.CharField(blank=True, max_length=10, null=True, verbose_name='Código de Erro')),
                ('error_message', models.TextField(blank=True, null=True, verbose_name='Mensagem de Erro')),
                ('sent_at', models.DateTimeField(auto_now_add=True)),
                ('delivered_at', models.DateTimeField(blank=True, null=True)),
                ('failed_at', models.DateTimeField(blank=True, null=True)),
                ('broadcast', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='app_eventos.broadcastlog', verbose_name='Broadcast')),
                ('contact', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='broadcast_messages', to='app_eventos.usercontact', verbose_name='Contato')),
            ],
            options={
                'verbose_name': 'Mensagem de Broadcast',
                'verbose_name_plural': 'Mensagens de Broadcast',
                'ordering': ['-sent_at'],
            },
        ),
        migrations.CreateModel(
            name='OtpLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(max_length=20, verbose_name='Número (Formato E.164)')),
                ('channel_type', models.CharField(choices=[('whatsapp', 'WhatsApp'), ('sms', 'SMS')], default='whatsapp', max_length=20, verbose_name='Canal Usado')),
                ('purpose', models.CharField(choices=[('signup', 'Cadastro'), ('login', 'Login'), ('password_reset', 'Recuperação de Senha'), ('phone_verification', 'Verificação de Telefone')], default='signup', max_length=30, verbose_name='Propósito')),
                ('status', models.CharField(choices=[('sent', 'Enviado'), ('verified', 'Verificado'), ('expired', 'Expirado'), ('failed', 'Falhou')], default='sent', max_length=20, verbose_name='Status')),
                ('provider_sid', models.CharField(help_text='ID do serviço Twilio', max_length=100, verbose_name='Twilio SID/Verify SID')),
                ('sent_timestamp', models.DateTimeField(auto_now_add=True)),
                ('verified_timestamp', models.DateTimeField(blank=True, null=True)),
                ('meta', models.JSONField(blank=True, default=dict, help_text='Informações adicionais em JSON', verbose_name='Metadados')),
                ('empresa_contratante', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='otp_logs', to='app_eventos.empresacontratante', verbose_name='Empresa Contratante')),
            ],
            options={
                'verbose_name': 'Log de OTP',
                'verbose_name_plural': 'Logs de OTP',
                'ordering': ['-sent_timestamp'],
                'indexes': [models.Index(fields=['address', 'status'], name='app_eventos_address_d7242f_idx'), models.Index(fields=['provider_sid'], name='app_eventos_provide_323469_idx')],
            },
        ),
    ]
